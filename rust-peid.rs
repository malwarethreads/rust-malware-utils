use std::env;
use std::fs::File;
use std::io::prelude::*;
use std::path::Path;
use std::string::String;

fn main() {

  let args: Vec<String> = env::args().collect();
  let mut file = File::open(&Path::new(&args[1])).unwrap();
  let mut buffer: Vec<u8> = Vec::new();
  let result = file.read_to_end(&mut buffer).unwrap();
  println!("File: {}, {} byte(s)", &args[1], result);

  if buffer[0] == 0x4d && buffer[1] == 0x5a {
    println!("MZ");
    let mut b1 = buffer[(0x3c + 1) as usize] as u16;
    b1 = b1 << 8;
    let b2 = buffer[0x3c] as u16;
    let addr = b1 | b2;
    let pe_offset = addr as usize;
    if buffer[pe_offset] == 0x50 && buffer[pe_offset + 1] == 0x45 {
      println!("PE");
      if buffer[pe_offset + 5] == 0x01 && buffer[pe_offset + 4] == 0x4c {
        println!("x86");
      } else if buffer[pe_offset + 5] == 0x86 && buffer[pe_offset + 4] == 0x64 {
        println!("x64");
      } else {
        println!("Other");
      }

    }
  }

}